module.exports.config = {
  name: "bdnews",
  version: "1.1.0",
  hasPermssion: 0,
  credits: "Adi.0X",
  description: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü (‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ query ‡¶è‡¶¨‡¶Ç category ‡¶∏‡¶π)",
  commandCategory: "News",
  usages: "/bdnews [query] [category] (‡¶Ø‡ßá‡¶Æ‡¶®: /bdnews ‡¶ñ‡ßá‡¶≤‡¶æ top)",
  cooldowns: 5,
  dependencies: {
    "axios": ""
  }
};

module.exports.run = async function ({ event, api, args, globalGoat }) {
  const axios = global.nodemodule["axios"];
  const { threadID, messageID } = event;

  if (args.length < 2) {
    return api.sendMessage("‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø query ‡¶è‡¶¨‡¶Ç category ‡¶¶‡¶ø‡¶®‡•§\n\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /bdnews ‡¶ñ‡ßá‡¶≤‡¶æ top", threadID, messageID);
  }

  const query = args[0];
  const category = args[1];

  try {
    const response = await axios.get("https://rubish-apihub.onrender.com/rubish//bdnews", {
      params: {
        query: query,
        category: category,
        apikey: "rubish69"
      }
    });

    const articles = response.data.articles;
    if (!articles || articles.length === 0) {
      return api.sendMessage(`"${query}" ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`, threadID, messageID);
    }

    let listMessage = `üì∞ "${query}" ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n\n`;
    articles.forEach((article, index) => {
      listMessage += `${index + 1}. ${article.title}\n`;
    });
    listMessage += "\n‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡ßü ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§";

    return api.sendMessage(listMessage, threadID, (err, info) => {
      global.client.handleReply.push({
        name: this.config.name,
        messageID: info.messageID,
        author: event.senderID,
        articles: articles
      });
    }, messageID);
  } catch (error) {
    console.error("BDNews API Error: ", error);
    return api.sendMessage("‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§", threadID, messageID);
  }
};

module.exports.handleReply = async function({ event, api, handleReply }) {
  const { threadID, messageID, body } = event;
  const selectedNumber = parseInt(body);

  if (isNaN(selectedNumber)) {
    return api.sendMessage("‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§", threadID, messageID);
  }

  const index = selectedNumber - 1;
  const articles = handleReply.articles;
  if (index < 0 || index >= articles.length) {
    return api.sendMessage("‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", threadID, messageID);
  }

  const selectedArticle = articles[index];
  let detailMessage = `üì∞ ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ: ${selectedArticle.title}\n`;
  detailMessage += `üìù ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£: ${selectedArticle.description || "‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßü"}\n`;
  detailMessage += `üîó ‡¶â‡ßé‡¶∏: ${selectedArticle.source || "‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßü"}\n`;
  detailMessage += `üìÖ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${selectedArticle.date || "‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßü"}`;

  if (selectedArticle.image) {
    return api.sendMessage({
      body: detailMessage,
      attachment: await global.utils.getStreamFromURL(selectedArticle.image)
    }, threadID, messageID);
  } else {
    return api.sendMessage(detailMessage, threadID, messageID);
  }
};
